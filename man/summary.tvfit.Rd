% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s-02_utilities.R
\name{summary.tvfit}
\alias{summary.tvfit}
\title{Summarize a tvvar_fit object}
\usage{
\method{summary}{tvfit}(fit, digits = 3, print = TRUE)
}
\arguments{
\item{fit}{tvvar_fit object (from unpenalized_estimate()/penalized_estimate()).}

\item{digits}{number of digits to print.}

\item{print}{logical; if TRUE, print nicely (uses knitr::kable when available).}
}
\value{
Invisibly returns a list with the following elements:
\describe{
\item{\code{info}}{Data frame of model metadata and ICs.}
\item{\code{params}}{Full parameter table with estimate, SE, z, and p.}
\item{\code{blocks}}{Named list of parameter subsets: scalars, Phi\_f, L\_vech, Phi\_c.}
}

(invisibly) a list with info, params, and block tables.
}
\description{
Produces a formatted summary table for a fitted time-varying VAR model estimated
via ML, EM, or penalized ECM.
The summary includes point estimates, (optional) standard errors, z-statistics,
and p-values, plus model information criteria and runtime.
It supports all outputs created by \code{\link{unpenalized_estimate}} and
\code{\link{penalized_estimate}}.
}
\details{
The output separates parameters into four logical groups:
\itemize{
\item \strong{Scalars:} A, B, and factor persistence parameters (\eqn{\phi_r})
\item \strong{Phi\_f:} Factor loadings on VAR coefficients (subject to L1 penalty)
\item \strong{L\_vech:} Lower-triangular elements of the Cholesky factor defining \eqn{\Omega}
\item \strong{Phi\_c:} Constant (if applicable) and lag-specific VAR coefficients
}

If a valid covariance matrix \code{fit$vcov} is available, the function reports
standard errors, z-values, and two-sided normal p-values.
Otherwise, these columns are shown but contain \code{NA}.

The model information block displays key meta-information (method, dimensions,
sample size) and standard information criteria (AIC, AICc, BIC).
}
\examples{
\dontrun{
# Example with simulated 2x2 system
data <- simdata$Y
fit_ml <- unpenalized_estimate(data, p = 1, r = 1, zero.mean = TRUE,
                               phi_f_structure = matrix(1, 2, 2), method = "ML")

# Print formatted summary
tvvar_summary(fit_ml)

# Retrieve underlying tables
s <- tvvar_summary(fit_ml, print = FALSE)
head(s$params)
}

}
