// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// check_lyapunov
double check_lyapunov(const arma::mat& Phi_c, const arma::cube& Phi_f, const arma::vec& phi_r, int seed, int D, int m);
RcppExport SEXP _tvvar_check_lyapunov(SEXP Phi_cSEXP, SEXP Phi_fSEXP, SEXP phi_rSEXP, SEXP seedSEXP, SEXP DSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_c(Phi_cSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Phi_f(Phi_fSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi_r(phi_rSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(check_lyapunov(Phi_c, Phi_f, phi_r, seed, D, m));
    return rcpp_result_gen;
END_RCPP
}
// my_loop_main
List my_loop_main(arma::mat ytilde, arma::cube Z, arma::mat startP, int cov, arma::mat startH, arma::mat momega, arma::mat pphi, double A, double B, arma::mat Q);
RcppExport SEXP _tvvar_my_loop_main(SEXP ytildeSEXP, SEXP ZSEXP, SEXP startPSEXP, SEXP covSEXP, SEXP startHSEXP, SEXP momegaSEXP, SEXP pphiSEXP, SEXP ASEXP, SEXP BSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ytilde(ytildeSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type startP(startPSEXP);
    Rcpp::traits::input_parameter< int >::type cov(covSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type startH(startHSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type momega(momegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pphi(pphiSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(my_loop_main(ytilde, Z, startP, cov, startH, momega, pphi, A, B, Q));
    return rcpp_result_gen;
END_RCPP
}
// create_Y_minus1
arma::mat create_Y_minus1(const arma::mat& Y, int lag_order, int T_fin, int dim_VAR);
RcppExport SEXP _tvvar_create_Y_minus1(SEXP YSEXP, SEXP lag_orderSEXP, SEXP T_finSEXP, SEXP dim_VARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type lag_order(lag_orderSEXP);
    Rcpp::traits::input_parameter< int >::type T_fin(T_finSEXP);
    Rcpp::traits::input_parameter< int >::type dim_VAR(dim_VARSEXP);
    rcpp_result_gen = Rcpp::wrap(create_Y_minus1(Y, lag_order, T_fin, dim_VAR));
    return rcpp_result_gen;
END_RCPP
}
// create_Z
arma::cube create_Z(const arma::mat& Y_minus1, const arma::mat& Phi_f, const arma::mat& Q_here, int T_fin, int dim_VAR, int number_factors, int lag_order);
RcppExport SEXP _tvvar_create_Z(SEXP Y_minus1SEXP, SEXP Phi_fSEXP, SEXP Q_hereSEXP, SEXP T_finSEXP, SEXP dim_VARSEXP, SEXP number_factorsSEXP, SEXP lag_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_minus1(Y_minus1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_f(Phi_fSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_here(Q_hereSEXP);
    Rcpp::traits::input_parameter< int >::type T_fin(T_finSEXP);
    Rcpp::traits::input_parameter< int >::type dim_VAR(dim_VARSEXP);
    Rcpp::traits::input_parameter< int >::type number_factors(number_factorsSEXP);
    Rcpp::traits::input_parameter< int >::type lag_order(lag_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(create_Z(Y_minus1, Phi_f, Q_here, T_fin, dim_VAR, number_factors, lag_order));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tvvar_check_lyapunov", (DL_FUNC) &_tvvar_check_lyapunov, 6},
    {"_tvvar_my_loop_main", (DL_FUNC) &_tvvar_my_loop_main, 10},
    {"_tvvar_create_Y_minus1", (DL_FUNC) &_tvvar_create_Y_minus1, 4},
    {"_tvvar_create_Z", (DL_FUNC) &_tvvar_create_Z, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_tvvar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
